JS 기본
웹사이트 f12 에서 Console에서 시작
문자와 문자열차이가 없고
clear()하면 화면청소
자바스크립트에서 같다는 ===세개 사용

html에서 자바스크립트 구문 작성하기
<script></script>
// 주석은 이렇게 사용
// 보통<script> 태그는 body태그의 최하단에 위치한다

// 출력문 4가지
        // 1. alert() : 경고창/ 알림창 출력문
        alert("경고창! / 알림창!");
        // 2. console.log : 콘솔 상 출력문
        console.log("콘솔창에서 뜨는 출력문");
        // 3. document.write() : HTML 에 즉시 출력
        document.write("HTML에 직접적인 출력 디버깅용도로 많이씀");
        // 4. innerHTML : 직접적인 출력x, html의 특정 요소값 변경해서 출력한다
        //                 document.getElementByID("ID값"); id name 있다 
        let p = document.getElementById("hi");
        p.innerHTML="변경한 출력메세지입니다."

// 템플릿 문자열 `문자 ${값}`
        console.log(`999*99의 결과는 ${999*999}입니다.`)

// 문자열 합치기가능 ex)"str"+"ing" = "string"

// typeof() : 특정값의 타입을 반환
자료형 number, string, boolean

console.log("17+3 값은"+(17+30)+"입니다.")
console.log("17+3 값은${17+30}입니다.")

// 상수와(const) 변수(let, var)
// 자바스크립트 경우에 초기화하는 값에 따라 타입을 자동으로 부여함
// [타입명] [변수명] = [값];
// const [타입명] [변수명] = [값];

// 산술연산자 : + - * / %
        // 대입연산자 : =
        // 비교연산자 : < > <= >= (값이 같다, 다르다)== != 
        //                       (값과 타입이 모두 같다 값 또는 타입이 다르다) ===, !==
        // 논리연산자 : &&, \\, !
        // 삼항연산자 : ? 
	// [조건식] ? [참일때 수행할 명령어] : [거짓일때 수행할 명령어]

// 강제 형 변환 : Number(), String(), Boolean()

// 입력문 : prompt, confirm()
        // prompt() : 문자 입력 받음 숫자 입력에도 사용됨
        let name = prompt("이름 입력하세요", "ex) 홍길동");
        let input= prompt("숫자 입력하세요", "ex) 1"); // 숫자도 문자로 입력받게 됨
        let age= Number(input); // 강제 형 변환
        // confirm() : true/false 입력 받음 확인/취소 boolean
        confirm("이대로 진행하시겠습니까?");


// 배열 : "여러 개의 값을 하나의 이름으로 저장하는 공간"
//          js 같은 경우 자료형의 제약 없고 공간의 제약 없음
//          배열이름이랑 "이게 배열이다" 라는 것만 명시하면 사용에 지장없다

// introduce라는 변수는 배열이다 라고 선언함
       let introduce = [];

// 임의의 위치를 지정해서 값을 넣을 수 있다.
        introduce[1] ="apple";
        console.log(introduce[1]);
        for(let i=0;i<5;i++){
            introduce[i]=100;
        }

        let student=["이현오",32,true,'A']; // 선언과 동시에 값 저장
        let stu=Array("이현오",32,true,'A') // 선언과 동시에 값 저장
        let stud=new Array("이현오",32,true,'A') // 선언과 동시에 값저장

// push()를 통해 순차적으로 삽입
        introduce.push("이현오");
        introduce.push(25);
        introduce.push(false);


 // 함수 : "특정 기능을 하는 명령문들의 집합"
        // 함수 구현
        // function 함수명(매개변수명, ...){
        //     명령문들; (return형도 포함)
        // }

 // 20~30대 여성만 참가할수 있는과정 참여가능한지 대한 함수 구현
        // 실제 입력값으로 함수 실행
        // 필요한 정보 : 나이 성별
        let name=prompt("이름 입력");
        let input=prompt("나이 입력");
        let age =Number(input);
        let tf = confirm("남성일경우 확인 여성일경우 취소 눌러주세요")
        let gender = tf===true?"남성":"여성";

        let element1=document.getElementById("name");
        let element2=document.getElementById("success");
        element1.innerHTML=name;  //입력받은 이름값 님 환영합니다


        let condition = confirm("이대로 진행하시겠습니까>");
        if(condition===true){
            // 과정 대상자 선발 조건: 나이가 20~39살 사이 성별은 여자
            if(isSuccess(age,gender)===true){
                element2.innerHTML="축하드립니다. 과정 참여자로 선발되셨습니다!";
            }
            else{
                element2.innerHTML="누락된 정보가 있거나 과정 대상자로 선발되지 못했습니다";
            }
        }
        else{
            element2.innerHTML="취소 누르셔서 다시 실행햐주시길 바랍니다.";
        }

        function isSuccess(a,g){ // a : 나이 g : 성별
            if(g==="여성" && (a>=20 && a<40)){
                return true;
            }
            else{
                return false;
            }
        }

// 객체
// 객체 선언
// let 객체명 = {멤버명: 멤버값, ...};

  let mine={
            name : "이현오",
            age : 32,
            gender : "남성",
            blood : 'O',
            /*객체안의 함수 작성법
            함수명 : function(매개변수명,...){
                명령문들;   
            }
            */
           print: function(){
            document.write(this.name+"<br>");
            document.write(this.age+"<br>");
            document.write(this.gender+"<br>");
            document.write(this.blood+"<br>");
           }
        };

// 객체 멤버 사용 : 객체명.멤버명, 객체명["멤버명"]


<body>
    <!-- 이벤트 적용에 사용되는 html 속성 : onclick, ondblclick, onmouseenter -->
    <button ondblclick="alert('더블클릭하셨습니다')">두번눌러</button>
    <button onclick="clicker()">눌러봐</button>
    
    <p id="text"></p>
    <br>
    
    <button id="para_button">본문 등장버튼</button>
    <p id="para" style="display: none">Lorem ipsum dolor sit amet, consectetur adipisicing elit. Soluta perspiciatis excepturi, recusandae ad culpa repellendus illo nobis iure quos ullam. Porro sit ipsum sapiente expedita iste consequatur a nihil quisquam.</p>

    <script>
        // JS 이벤트
        // 1) 함수로 행동을 정의 + html 속성으로 등록 
        function clicker() {
            alert("버튼클릭하셨습니다");
            document.getElementById("text").innerHTML = "텍스트등장!";
        }

        // 2) 이벤트 리스너 : 이벤트 발생했을 때, 그 처리를 담당하는 함수 사용
        let paraButton = document.getElementById("para_button");
        paraButton.addEventListener("click", show);

        function show() {
            let para = document.getElementById("para");
            para.style.disp


<!-- 로컬 txt 파일을 통신으로 당겨오는 작업-->
    <h3>아래는 txt 파일 내용을 불러온 결과입니다</h3>
    <div id="text_area"></div><!-- 여기다 txt 파일 내용 불러올 예정-->
    <script>
        // Ajax 통신 : 비동기식 "통신" 방식

        // XMLHttpRequest 객체 생성
        // 1. XMLHttpRequest 객체 생성 (객체명 ; xhttp)
        const xhttp=new XMLHttpRequest();
        // 2. 서버가 준비되면 수행할 명령문 작성 -> 함수 작성
        xhttp.onload=function(){
            document.getElementById("text_area").innerHTML=this.responseText
            // ajax 통신을 통해 파일(txt파일)을 요청하면 응답이 도착 할 것
            // 응답받는 파일 = 요청한 파일
            //  -> 응답받은 파일의 내용 = this.responseText


        }
        // 3. 실질적 으로 통신 요청하고 응답받기
        xhttp.open("GET","xmlhttp.txt");    // open("GET","파일명") 서버에 요청할 내용 구성
                    // 첫번째자리에 GET or Post : POST 형식이 GET보다 강력하다
        xhttp.send();   // 서버에 요청 전송

        // 실질적인 실행 순서는 1 -> 3 -> 2


    </script>

<body>
    <h3>아래는 웹에 있는 json  파일에서 불러온 값입니다.</h3>
    <p id="test"></p>
    <script>
        // JSON : (특별한 양식은 아님) 가독성이 좋고 가벼운 파일 양식 중 하나

        //XMLHttpRequest 객체 사용 , 통신을 시도
        // 1. 객체생성
        const xhttp=new XMLHttpRequest();
        // 2. xhttp 객체의 상태가 변경되었을 때 실행될 함수 정의
        // xtttp 객체 상태 변경 = 서버와 연결을 시도하였을 때
        xhttp.onreadystatechange = function(){
            // 서버와 통신이 성공한 경우 외우기
            if(this.readyState===4 && this.status===200){
                let para =document.querySelector("#test")
                para.textContent=JSON.parse(this.responseText)["Name"]


            }

        }
        // 3. open(), send()
        xhttp.open("GET","https://starfall-yuna.github.io/super-duper-computing-machine/json.json");
        xhttp.send()

    </script>
    
</body>

<body>
    <h3>아래는 웹에 있는 json ㅍ아일에서 불러온 값입니다</h3>
    <p id="test"></p>
    <script>
        // fetch api 사용 ajax 통신시도
        // 1. fetch 메소드 사용 파일요쳥
        fetch("https://starfall-yuna.github.io/super-duper-computing-machine/json.json")
        .then(response => {
            // 보낸 요청에 대해 응답이 잘 도착하였는지 확인
            if(!response.ok){
                throw new Error('400 or 500 error')
            }
            return response.json(); // json.parse와 유사
        })
        .then(data => { // 응답받은 데이터 처리
            let para = document.getElementById("test");
            para.textContent = data["Name"] + " " + data["age"]; // JSON.parse
        })
        .catch(error =>{
            console.log("Error")
        })
    </script>
    
</body>