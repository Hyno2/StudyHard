css의 기본
/*css 주석
  css 파일은 화면 디자인을 담당한다
  css 파일에 작성된대로 규칙적으로 html 파일을 작성했다면,
  여러 html 파일에 대해서 하나의 css파일로 통일적으로 스타일 적용이 가능
  */

/*
  선택자 :: 특정 조건에 맞는 태그를 선택하는 구문
        => 여러개를 복합적으로 작성가능, 여러 태그들을 나열해서 작성할 수도 있다
  선언문 :: 적용할 스타일 정의
  h1, p{ -> 선택자
    속성명1: 속성값1; -> 선언문1
    속성명2: 속성값2; -> 선언문2
    ...
  }
*/

/*
CSS 스타일 적용 방법
1. 외부 CSS 파일을 html 파일에 적용
    <head>에 아래 구문을 작성해야함
     <link rel="stylesheet" href="CSS파일명">
2. html 파일 내부에 <style> 삽입하여 스타일 적용
3. 태그에 직접적으로 style 속성 부여
*/

/* 전체 선택자(*) : html 페이지안에있는 모든 태그들을 선택*/
/* *{
    border: 2px solid aquamarine;
} */
h1, h3{
    background-color: blueviolet;
    font-style: italic;
}

/* 아이디 선택자 : 특정 아이디 값을 갖고 있는 태그 선택 
"#" 기호를 사용해서 선택
아래 구문 같은 경우엔, id 값이 반드시 같아야만 적용(first_h1_auto여도 적용안됌)*/

#first_h1{
    font-size: 500%;
}

/* 클래스 선택자 : 각 태그들의 class값들 중 특정 값이 있는 태그 선택
"." 기호를 사용해서 선택
class값 중 지정된 값이 포함되어있기만 하다면 적용된다*/
.first{
    border: 2px solid black;
}

/* h1태그 전체와 h2태그들 중 클래스값 중 first라는 값이 포함되어있는 태그 선택*/
h1,  h2.first{
    text-align: center;
}


/* CSS파일 작성시 개략적인 스타일 설정을 윗부분에 작성 후
   구체적인 스타일 설정을 파일 아래부분에 작성하면좋다*/

/* label 태그들 중 for 속성이 "female"인 것만 적용*/
label[for="female"]{
    color: pink;
}

/* label 태그들 중 for 속성인 것만 적용*/
label[for]{
    color: blue;
}

/* 반응 선택자 : 
    ":active(마우스를 눌렀을 때 스타일 적용)"
    ":hover(마우스를 가져다 댔을 때 스타일 적용)"
    [선택자]:hover/active {선언문들}
*/

/* transition : 전환과 관련한 스타일 부여 */
transition: all 2s; /* 전환과 관련한 모든 진행 시간을 2초로 지정한다*/
transition-timing-function: ease-in-out; /*전환형식 : 디폴트값은 linear(일정한 속도로 변환)*/
transition-delay: 1s; /* 1초 정도 가만히 있다가 전환 수행*/

<!--후손 선택자 : 특정 태그 안에 있는 후손을 선택-->
<!--[선택자1] [선택자2] {선언문들}      (공백을 이용해서 후손을 선택)-->
#header h3,p{ /* #header의 후손은 h3와 모든 p에 스타일 적용*/
    border: 3px solid red;
}

/* 자손 선택자 : 특정 태그 "바로 안에 있는" 자손을 선택
[선택자1][선택자2]{선언문들}        (> 기호를 사용)*/
#header h3,#header>p{ /* #header의 후손은 h3와  p에 스타일 적용*/
    border: 3px solid red;
}
table 태그의 직속 후손은 tbody밖에 없다-->

/* 동위 연산자 : +, ~ 
[선택자1] + [선택자2]: [선택자1] 바로뒤에 위치하는 [선택자2] 선택 (반드시 하나만 선택)
[선택자1] ~ [선택자2]: [선택자1] 뒤에 위치하는 [선택자2] 선택*/

h1+p{
    color: aqua;
}

h1~p{
    background-color: brown;
}

/* 상태 선택자 : :checked, :focus, :enabled, :disabled*/
input:focus{  커서 
    background-color: aquamarine;
}
input:enabled{ 활성
    background-color: beige;
}
input:disabled{ 비활성
    background-color: gray;
}

/* 타입이 체크박스인 input 태그를 체크했을때 */
input[type="checkbox"]:checked+div{
    height: 0px;
}
div{
    overflow: hidden;
}

/* 구조 선택자: :first-child :last-child
/* h2:first-child : h2 태그가 body에서 가장 먼저나타났다면, 스타일적용해라
   h2:last-child : h2 태그가 body에서 가장 아래에 나타났다면 스타일적용해라
융통성이 없다
   p:first-of-type : 가장 먼저 나타난 p태그에 스타일 적용해라
   p:last-of-type : 가장 나중에 나타난 p태그에 스타일 적용해라*/*/

nth는 위치지정 여기선 전체
*/
p:nth-last-child(2){
    background-color: red;
}

/* 링크 선택자 : 
:link(href 속성값을 갖고 있는 a 태그 선택)  
:visited(이미 지정된 링크를 방문한 태그)
 */
 a:link{
    color: black;
 }
 a:visited{
    color: darkred;
 }
 #naver:active{
    color: green;
 }

/* 부정 선택자 : :not(부정하고자 하는 선택자)*/
input:not([type="text"]){
    background-color: lightgray;
}

/* 문자 선택자 : 지정된 태그에 있어서 특정 문자에 스타일 지정 
   시작 문자 선택자 : ::first-letter, ::first-line
*/
p::first-letter{
    font-size: 200%;
    color: red;
}
p::first-line{
    color: blue;
}

/* ::selection => 사용자가 임의로 드래그한 글자 선택*/
p::selection{
    background-color: lightgray;
    color: green;
}

/* keframes :: 애니메이션을 생성하는 키워드*/
animation: rainbow;
animation-duration: 3s;
animation-iteration-count: infinite;

/*
"특정 조건식을 만족한다면, 아래처럼 반응하라 "
 @medai screen and (조건식){
    선택자{스타일 적용문}
}
*/

@media screen and (max-height:500px) {
    p{background-color: green;}
}
@media screen and (max-height:300px) {
    p{background-color: red;}
}

/* position 속성 : 위치, 좌표(x, y축)
    => 이 속성을 통해 요소 위치(좌표 값)을 부여하는 방법 지정

position: static(디폴트)
    웹 사이트 상 (0,0)부터 시작해서, 요소들을 그냥 붙여둠 (좌표 지정값이 안먹힘)
position: relative (상대적인)
    본래 있어야할 좌표를 (0,0)으로 삼으며 그 기점으로 좌표 이동
position: fixed (고정적인) -> 부모 태그 눈치를 안봄
    다른 태그의 위치 상관없이, 브라우저 상 정해진 위치에 있음(스크롤 내려도 본래 자리에 위치함)
position: absoltute (절대적인) -> 부모 태그 안에서만 절대 좌표를 갖는다
    (스크롤 내리거나 올리면서 부모 태그가 시야 밖에 있다면 같이없어짐 
*/

부트스트랩
https://getbootstrap.com/ 
Container

Navbar 메뉴바

Grid 시스템
한 줄을 12개의 열로 나누어 내용을 원하는 위치에 위치시킴
※ 12로 나눈 이유 : 12가 약수가 많으므로(1,2,3,4,6,12) 다양하게 칸을 나눌 수 있음
※ bootStrap없이 display:grid를 이용하여 Grid 시스템 사용 가능 

Card
카드 형태로 된 레이아웃
목록 요소들에 제목을 달고 싶을 때 card 클래스 사용
btn class : 버튼 모양 구현
btn-primary : 파란색 버튼
src 부분에 적절한 이미지 주소 삽입
Style 부분은 수정하거나 삭제해도 됨

BootStrap 템플릿 모음 사이트
https://startbootstrap.com/ 
https://www.codeply.com/
기타 참고 템플릿
https://w3layouts.com/ 
