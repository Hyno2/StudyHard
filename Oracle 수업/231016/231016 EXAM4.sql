CREATE SEQUENCE COMPANY;
--1. 부서 테이블 생성
-- 코드 char(3)
-- 부서명 varchar2(100)
CREATE TABLE DEPARTMENT(
    D_CODE CHAR(3) PRIMARY KEY,
    D_NAME VARCHAR2(100)
);
--2. 직급 테이블 생성
-- 코드 int
-- 직급명 varchar2(100)
CREATE TABLE RANK(
    R_CODE INT PRIMARY KEY,
    R_NAME VARCHAR2(100)
);
--3. 인사 테이블을 만든다.
-- 사번 char(5)
-- 부서코드
-- 직급코드
-- 이름 varchar2(100)
-- 나이 int
-- 성별 char(1)
-- HP varchar2(15) unique
CREATE TABLE TRANSFER(
    T_NUM CHAR(5),
    TD_CODE CHAR(3),
    TR_CODE INT,
    T_NAME VARCHAR2(100),
    T_AGE INT,
    T_SEX CHAR(1),
    T_HP VARCHAR(15) UNIQUE
);

--4. 부서 3개, 직급 3개, 사람 10명을 만든다.
--부서 3개
INSERT INTO DEPARTMENT VALUES('111','도시과');
INSERT INTO DEPARTMENT VALUES('222','환경과');
INSERT INTO DEPARTMENT VALUES('333','경제과');
--직급 3개
INSERT INTO RANK VALUES(COMPANY.NEXTVAL,'주임');
INSERT INTO RANK VALUES(COMPANY.NEXTVAL,'과장');
INSERT INTO RANK VALUES(COMPANY.NEXTVAL,'부장');
--사람 10명
INSERT INTO TRANSFER VALUES('A','111',1,'이현오',32,'M','010-1111-1111');
INSERT INTO TRANSFER VALUES('B','333',2,'박주호',26,'M','010-2222-2222');
INSERT INTO TRANSFER VALUES('C','222',3,'이기현',29,'F','010-3333-3333');
INSERT INTO TRANSFER VALUES('D','111',3,'김상수',36,'M','010-4444-4444');
INSERT INTO TRANSFER VALUES('E','222',2,'장덕수',40,'M','010-5555-5555');
INSERT INTO TRANSFER VALUES('F','222',1,'정민호',38,'M','010-6666-6666');
INSERT INTO TRANSFER VALUES('G','333',2,'조민우',33,'M','010-7777-7777');
INSERT INTO TRANSFER VALUES('H','333',3,'강대호',41,'M','010-8888-8888');
INSERT INTO TRANSFER VALUES('I','111',2,'나유라',21,'F','010-9999-9999');
INSERT INTO TRANSFER VALUES('J','111',1,'문성후',38,'M','010-0000-0000');

--5. 성이 이씨인 사람을 찾는 쿼리를 작성(like 혹은 구글링이나 gpt 쓰기)
-- %의 의미 : 최소 0글자 이상
-- 이% = 이, 이동준, 이유나 이이 등등 
-- %이 = ..이로 끝나는 것
-- %이% = 이 만 포함되있으면 다 나옴
SELECT * FROM TRANSFER WHERE T_NAME LIKE '이%';    

--6. 가장 많은 나이는 몇 살인지 출력
SELECT MAX(T_AGE) 최고령 FROM TRANSFER ;
--7. 가장 나이가 어린 사람은 누구인지 출력(중첩질의문을 쓰면 되는 데 무슨 말인지 모르면 구글링이나 gpt)
SELECT * FROM TRANSFER WHERE T_AGE = (SELECT MIN(T_AGE) FROM TRANSFER);

--8. 가장 나이가 많은 부서 차기(평균 나이 기준)
-- 부서별 평균 나이를 구해야 한다.
SELECT TD_CODE,AVG(T_AGE) FROM TRANSFER GROUP BY TD_CODE;
-- 소수점 0.1 까지 나오게하기 ROUND
SELECT TD_CODE,ROUND(AVG(T_AGE),1) FROM TRANSFER GROUP BY TD_CODE;

-- 뷰로 만들때 중요한것 ROUND, AVG 드을 이용해 뷰만들때
-- 이부분에 대한 임시 이름을 붙여줘야한다 (이름을 RVA로 만들었음)
-- 뷰에서 가상 컬럼에 대해서 추가,수정,삭제가 안된다
CREATE VIEW AVG_TRANS AS SELECT TD_CODE, ROUND(AVG(T_AGE),1)RVA FROM TRANSFER
GROUP BY TD_CODE;

SELECT * FROM AVG_TRANS;

-- 그중에서 MAX값을 구해야한다
SELECT * FROM AVG_TRANS WHERE RVA=(SELECT MAX(RVA) FROM AVG_TRANS);
-- 부서별 평균 나이가 MAX랑 일치하는 부서를 찾아야한다
SELECT T_NAME,TD_CODE,RVA FROM AVG_TRANS 
JOIN TRANSFER ON AVG_TRANS.TD_CODE = TD_CODE
WHERE RVA = (SELECT MAX(RVA) FROM AVG_TRANS);


--9 성별별 평균 나이 출력하기
SELECT T_SEX, AVG(T_AGE) FROM TRANSFER GROUP BY T_SEX;

--10. 인사 테이블을 출력하되, 부서코드와 직급코드들도 부서명과 직급명으로 출력하기
--      즉 3개의 테이블을 서로 조인해야 함
ALTER TABLE TRANSFER ADD CONSTRAINT FK_CODE FOREIGN KEY(TD_CODE) REFERENCES KBMajor(D_CODE);
ALTER TABLE TRANSFER ADD CONSTRAINT FK_CODE FOREIGN KEY(TR_CODE) REFERENCES RANK(R_CODE);
SELECT DEPARTMENT.D_NAME 부서명, RANK.R_NAME 직급명 FROM TRANSFER,RANK,DEPARTMENT WHERE TRANSFER.TD_CODE = DEPARTMENT.D_CODE AND TRANSFER.TR_CODE = RANK.R_CODE;