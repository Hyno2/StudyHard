C#	
Ctrl-F : 찾기 대화 상자
Ctrl-H : 바꾸기 대화 상자
Ctrl-G : 해당 줄로 가기
Ctrl-F5 : 프로그램 시작
Ctrl-A : 전체 코드 블럭잡기 -> Ctrl-K,F : 선택한 영역 자동 코드 정렬  (이거 다시 찾다가 포스팅하는 중...)
F12 : 커서위치 내용의 정의로 이동( 즉, 대략 CPP파일 구현부로 이동)
Ctrl-K, C : 선택한 블록을 모두 주석 처리
Ctrl-K, U : 선택한 블록을 모두 주석 처리 해제 
.Net FrameWork : 라이브러리 + 닷넷플랫폼
Environment.NewLine 은 = "\n"이랑 같다

윈도우에 이벤트뷰어로 C#같은경우는 오류를 찾아낼수 있다

일반적인 경우에 숫자도 문자형으로 한다 
정수형은 예외처리도 해줘야하고 할게 많다
정수형으로 쓰는경우는 산술연산이 필요하기때문에
프레임워크 : 구동되는 환경
	    틀을 만들어준다
	     구상은 다되어있지만 세부기능을 내가 작성하는것

라이브러리 : 내가 전체를 구상해서 기능을 가져다쓰는거
heap : 프로그램이 구동중일 때 할당하고 사용하는 메모리
stack : 프로그램 시작 전에 미리 메모리 할당하는 부분
static 정적 이 우선이다 static이 붙어있으면 클래스 메서드이거나 클래스 변수
	아니라면 인스턴스 메서드 인스턴스 변수
	main이나 static에서 인스턴스 메서드나 변수를 사용하고싶다면
	클래스를 객체화 시켜서 부른다 
C#에서는 접근 제어자를 쓰지않을때 private으로 적용된다
정적 생성자 
인스턴스 호출하는 시점에 딱 한 번만 호출한다 
static 클래스명(){}

캡슐화 : 메소드 호출의 순서가 중요할때 
여러개의 클래스의 메소드를 하나의 클래스로 묶는다 통합시킨다

객체를 값만 복사하려고 할때에는 Structure을 사용하면된다
참조복사 : 위치를 복사하는거라 원본이 따라바뀐다
값복사 : 위치를 가르키기만해서 원본은 불변이다

// ref 키워드 = 참조자
   // 해당 변수의 값뿐 만아니라 그 변수의 위치도 같이 가져오는 것
   // 따라서 swap에서 값이 바뀌면 swap밖에있는 원본의 값이 변경된다

재귀 함수 자기자신을 호출하는것  
합,곱,피보나치에서 사용

Hashmap 쓰는것
 Dictionary<string,string> student = new Dictionary<string, string>();

using = import
namespace = 프로그램이름, 이름공간

보기 - 도구상자 
mbox 탭 = MessageBox.Show()
두 값의 합 " 20이아니고
두 값의 합(5+15) : 20 이렇게 뜨위가 빼기 곱하기 나누기 나머지 
mbox("두 값의합("+num1+"+"+num2+"):"+(num1+num2);
Mbox($"두값의 합({num1}+{num2}):{num1+num2}");
mbox(string.Format("두 값의 합({0}+{1}):{2}",num1,num2,num1+num2));

int.Parse: 공백을 비롯해 숫자를 입력하지 않으면 튕김	
	이른 보완한것이 int.TryParse
 int.TryParse
엉뚱한 값을 넣어도 오류나지않고 0을 집어넣어줌
// 상수
const double PI = 3.14
int.TryParse(Console.ReadLine(),out input);
int.TryParse(Console.ReadLine(),out int r);


솔루션 안에 프로젝트
.net WinForm : 프레임워크
.net Console

출력
cw 탭
Console.WriteLine();

charAt(n)은
Console.WriteLine("문자"[n]); 으로쓴다

입력
Console.ReadLine();
위의 명령문은 문자열만 입력 가능하다

형변환 
강제변환(int)값
문자열을 숫자로 변환하는 메소드
int.Parse()
long.Parse()
float.Parse()
double.Parse()
bool.Parse()

int number = 200;
string out = number + "";
Console.WriteLine(out);

조건문

// 삼항 연산자
// 물음표와 콜론을 통하여 조건문을 한 줄로 표현하는 것
int num = int.Parse(Console.ReadLine());
String result = num % 2 == 0 ? "짝" : "짝이아님";
// 수식 / 그 수식이 참인경우 " 그 수식이 거짓인 경우

// switch 문
 // case 밑에 단 한줄의 코드가 있다면 그 밑에는 꼭 break가 필요
                            // Java, C 에선 밑에 break 없어도 돌아는감
반복문
switch break필수

foreach (자료형 변수 in 컬렉션) 인덱스말고 값만 불러올때 사용된다
{
}
 // foreach 문
 int[] numbers = { 10, 20, 30, 40, 50 };
 // i = numbers 안에 있는 값들을 각각 의미함
 // java의 for(int item : numbers)
 foreach(var i in numbers)
 {
     Console.WriteLine(i);
 }

배열
타입[] 배열명 = {값};

상속
C#에서는 :을 사용해서 상속시킨다


클래스
사용자 정의 자료형
인스턴스(객체) : 클래스 자료형을 변수로 선언한 것
	        인스턴스는 값을 가지고 있는것이 아니라 
	        값을 가르키고 있는거 pointer
class명 인스턴스명 = new 생성자();

static이 안붙은 것은 인스턴스 변수
인스턴스가 선언되고 나서야 메모리에 올라가기 때문
Product p = new Product(); <- 이코드가 필수
p.name = "감자";
인스턴스 별로 각자 값이 다를수 있다

static이 붙은 것들은 클래스 변수
인스턴스 선언되기 전 즉 프로그램을 시작하자마자 메모리에 올라감
Product.CompanyName ="경북농산";
Product 타입 객체들이 모두 공유한다. 공통적으로 접근 할수있다.
public static string companyName;

//인스턴스에 값을 넣는 방법
  첫번째 방법 = 직접 대입
InitializeComponent();
Product.companyName = "경북산업마트";
Product p1 = new Product();
p1.name = "마이크";
p1.price = 90000;

// 두번째 방법 = 선언과 동시에 값을 대입(생성자랑 관계없음)
 Product p4 = new Product() { name = "바디워시", price = 50000 };

  // 세번째 방법 = 생성자를 활용하는 방법(자바랑 동일함
  Student s1 = new Student(1, "이현오");

getter setter
접근제어자 타입 메소드명{ get; set;}
public int 메소드명 {get; set;}

추상화 : 프로그램에 사용되는 핵심적인 부분을 추출하는 것

partal 클래스 : 한클래스에 여러부분으로 나눠서 정의하는것

랜덤객체만들기
Random r = new Random();
객채.text또는 숫자 = r.Next(100).ToString();

List 
리스트는 기본적으로 참조 복사를 지원한다
C#에서 List는 Java의 ArrayList랑 사실상 똑같다
List<string> namelist = new List<string>();
List<int> agelist = new List<int>();
List<int> age2list = new List<int>();

// 참고 C#에 있는 ArrayList는
// 자바의 ArrayList<Object>랑 동일하다
// 즉 아무거나 다 들어가는 리스트이다
ArrayList tmiList = new ArrayList();

enum : 가독성 올릴떄 사욜한다

다형성 : 코드 중복을 제거하기 위해 사용한다
 //	 왼쪽 = 오른쪽의 관계가
 //          오른쪽 is 왼쪽
 // ex       핸드폰 p = new 스마트폰
 // ex       스마트폰 is 핸드폰 O
 //          핸드폰 is 스마트폰 X
 Animal a = new Dog(); // Dog is Animal
 Animal b = new Cat(); // Cat is Animal

 a.age = 1;
 a.eat();
 a.sleep();
 // a는 Dog인스턴스이므로 Dog로형변환이 가능하다
 // bark 는 Dog에만 있기에 형변환 해야함
 ((Dog)a).bark();
 // b는 Cat인스턴스이므로 Cat로 형변환가능
 // meow 는 Cat에만 있기에 형변환 해야함
 ((Cat)b).meow(); 

 // 형변환 2번째 방법
 if(b is Dog)
 {
     // 여기서도 세가지 방법이있다
     //1
     ((Dog)b).bark();
     //2
     (b as Dog).bark();
     //3
     var test = b as Dog;
     if(test != null)
     { test.bark(); }
 }

생성자
상위클래스에 상속되있는하위클래스를 인스턴스로 생성할때 생성자가 호출되는데
그럴때 상위클래스 생성자 먼저 호출된후 하위클래스 생성자가 호출된다

상위클래스 생성자가 여러개일때 골라서 호출하고싶을땐
하위클래스 생성자뒤에 : 상위클래스 생성자(파라메터)에따라 호출할수있다

오버라이드
오버라이드를 하고싶은 메소드는 virtual을 써줘야한다
alt + enter override 해줌

추상클래스
상위클래스가 추상메소드가 있다면 하위클래스에선 의무적으로 오버라이드해야한다
abstract = 추상화라는건 구현되있지않음 구현을 하위클래스에게 넘긴다
// 추상클래스의 특징
// 불완전하므로 단독으로 인스턴스 만들수없다


버튼을 동그라미 모양으로 바꾸기
public class CircleButton : Button
{
    protected override void OnPaint(PaintEventArgs pevent) // OnPaint는 Button안에있다
    {
        GraphicsPath g = new GraphicsPath();
        g.AddEllipse(0, 0, ClientSize.Width, ClientSize.Height);
        this.Region = new System.Drawing.Region(g);

        base.OnPaint(pevent);
    }
}

모달 : 모달을 만나면 코드 중지, 
         뒤에있는 창을 제어 불가능하게한다
모달리스 : 창이 각각 뜨고 코드 진행되고 
             뒤에있는 창을 제어 가능

private void button5_Click(object sender, EventArgs e)
{
    MyForm m = new MyForm();
    m.ShowDialog(); //모달(Modal)
    MessageBox.Show("Test");
}

private void circleButton1_Click(object sender, EventArgs e)
{
    MyForm m = new MyForm();
    m.Show(); //모달리스(Modaless)
    MessageBox.Show("Test");
}

화면안에 창 뜨게하기
IsMdiContainer = true; // 자기 자신을 mdi 컨테이너로 만듦
버튼클릭안에 
MyForm m = new MyForm();
 m.MdiParent = this;
 m.Show();

제네릭<T>
타입이 아직 정해지지않아서 임의로 정해놓는것 같음
어떤타입이든 넣을수 있다

클래스 뒤에 <T> 넣어주고
객체 생성할때 클래스명뒤, 생성자명뒤에 <타입> 을적어준다

out 은 대입문이 필수이다 ref랑 기능은 같다
값을바꿔주면 실제값도 변경됌
int a = int.Parse("123");
int.TryParse("123", out int a);

구조체
구조체는 생성자에서 구조체를 전부 초기화시켜줘야한다

인터페이스 규칙 규약
클래스에게 규칙을 준다 가이드라인을 준다
추상클래스와의 차이점 
인터페이스는 다중 상속을 지원한다 하나의클래스에 한가지 이상의 규칙을 부여가능

IComparable 인터페이스
내장되어있는 인터페이스이다
    // CompareTo의 결과가 양수 음수냐에 따라 어디로 정렬할지 결정이된다
    // Sort함수에서 내부적으로 CompareTo를 호출함
    // 구체적으로 어디서 언제 어떻게 호출하는지는 모름

클래스뒤에 IComparabel 상속받고 alt + 엔터
    return price.CompareTo(other.price);

예외처리(Exception) try catch finally
아예 실행이안됌
실행은되는데 갑자기 꺼지는 에러
실행은되는데 내가원하는데로 실행안댐

try 에서 실행시키고

예외발생했을경우 catch에서 실행한다 
return; 을하면 밑의 코드는 실행안된다
finally 예외가 있든 없든 무조건 실행시킨다 DB연동에서 쓰인다고한다
DB연동 제외하고는 거의 try catch로만 해결한다

catch Exception은 클래스이다 3가지종류가있음
기타오류를 젤 밑에써야한다
FormatException = 포맷오류
ArithmeticException = 산술오류
Exception = 기타오류

콜백함수
매개변수로 쓰이는 함수

델리게이터 Delegate
대리자, 사용자 정의 자료형
메소드를 변수로 만들수있다

// 무명 델리게이트 : 메소드인데 한번만 쓰이고 이름이 없는 메소드

람다 : 무명 델리게이트를 축약한 형태

스레드
프로세서안에 많은것들

프로세서
하나의 일만처리한다

Linq DB 문법을 사용해서 처리한다
단점 : 한줄로 다되어있어서 오류 찾기가 어렵다

XML 
<태그>